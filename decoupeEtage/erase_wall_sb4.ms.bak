/*
maj:
parametrer la zone d'impact(radius de la sphere)


*/
-- $.getVertexFace 1 1

-- polyop.getFaceDeg $ 1

fn eraseSplineSeg s eraser = 
(
	format "start erasing\n"
	-- 	spSel = getSplineSelection s
	spCount = numsplines s
	-- 	spSel = 1
	for sp = 1 to spCount do
	(
		segCount = numSegments s sp
		-- calcul du vecteur
		for k = 1 to segCount do
		(
			kk = k +1
			if isClosed s sp and k == segCount  then kk = 1

-- 			format "k1:%\n" k
-- 			format "kk:%\n" kk
	
			k1 = getKnotPoint s sp k
			k2 = getKnotPoint s sp kk
-- 			format "s: %, sp:%  k:% k1:% k2:%\n" s.name sp  k k1 k2
			v1 = normalize (k2-k1)
			v2 = normalize (k1-k2)

			ray1 = ray k1 v1
			ray2 = ray k2 v2
			
			res1 = intersectRay eraser ray1
			res2 = intersectRay eraser ray2
			
-- 			format "res1: % res2: % \n" res1 res2
			if not res1 == undefined and not res2 == undefined then
			(
				format "res1: % res2: % \n" res1 res2
				format "delete s: % sp:% k:%\n" s.name sp k
				setSegSelection s sp #(k)
			)
		)
	)

	-- delete segment
-- 	undo on
-- 	(
-- 		select s
-- 		modPanel.setCurrentObject s
-- 		subobjectLevel = 2
-- 		splineOps.delete s
-- 		windows.ProcessPostedMessages()
-- 		
-- 		subobjectLevel = 0
-- 		clearselection()
-- 	)
-- 	format "erasing done\n"
)

eraser = $Sphere001
wall1 = $wall_A645
eraseSplineSeg wall1 eraser


try(destroydialog testPickerRLT)catch()
rollout testPickerRLT "Test Picker"
(
	local goodRes
	checkbutton pickCB "pick"
	
	tool testTool
	(
		on mousePoint clickno do
		(
			format "########## start click\n"
			
			local myRay = mapScreenToWorldRay viewPoint
-- 			format "clickno:%\n" clickno
-- 			format "viewPoint: %\n" viewPoint
-- 			format "node: %\n" snapMode.node.name
			
			-- si l'objet est un editable poly
			if iskindof snapMode.node.baseobject editable_poly then
			(
							
				-- Selectionner une face
				selVx = #()
				polyFaceAr = #()
				
				-- ajouter un editmesh sur l'objet
				em = (Edit_Mesh ())
				addmodifier snapMode.node  em
				
				-- retourner la face de l'edit mesh selectionné
				if isvalidnode snapMode.node then
				(
					tmpHit = intersectRayEx snapMode.node myRay
					if tmpHit != undefined then
					(
						format "face id: %\n" tmpHit[2]
						-- recuperer les trois vertex de la face
						selVx = meshop.getVertsUsingFace snapMode.node tmpHit[2]
						format "vx: %\n" selVx
					)
				)
				deletemodifier snapMode.node  em
				
				-- dans le poly retourner les faces avec les trois vertex
				for id in selVx do
				(
					polyFace = polyop.getFacesUsingVert snapMode.node # {id}
	-- 				format "polyFace: %\n" polyFace
					append polyFaceAr polyFace
				)
				
				-- recouper les bitarray			
				for  p in polyFaceAr do polyFaceAr[1] *= p
				faceSel = (polyFaceAr[1] as array)[1]
				format "faceSel: %\n" faceSel
			)
			-- si l'objet est une line avec un sweep
			else if iskindof snapMode.node.baseobject line or iskindof snapMode.node.baseobject SplineShape then
			(
				tmpHit = intersectRayEx snapMode.node myRay
-- 				format "tmpHit:%\n" tmpHit
				if not tmpHit == undefined then
				(
					sourceObj = sphere radius: 15 name: (uniquename "eraser")
					sourceObj.controller.pos.controller.value =  tmpHit[1].pos
					sourceObj.dir =  tmpHit[1].dir
					
					eraseSplineSeg snapMode.node sourceObj
					delete sourceObj
				)
				-- à partir de la face selectionné retrouver l'id de la section correspondante
			)
			-- si l'objet est un mesh
			-- si l'objet est un edit poly avec un shell
		)
		
		on mouseMove clickno do(/*format "######## move #######\n"*/)
		
		on stop do 
		(
			format "######## stop #######\n"
		)
	)
	
	on pickCB changed state do
	(
		if state do
		(
-- 			snapMode.display = false
			bakSnapDisplay = snapMode.display
			bakSnapActive = snapMode.active
			bakFaceSnap = snapMode.getOSnapItemActive 7 5

			-- active vertex, edge et face
			snapMode.display = false
			snapMode.active = true	
			snapMode.setOSnapItemActive 7 5 true
			max drawingaids; max drawingaids 
			
			continueTool = true
			while continueTool == true do
			(
				continueTool = starttool testTool
			)
			pickCB.state = false
			
			snapMode.display = bakSnapDisplay
			snapMode.active = bakSnapActive		
			snapMode.setOSnapItemActive 7 5 bakFaceSnap

		)
	)
)
createdialog testPickerRLT